
strainGauges.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a20  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002bac  08002bac  00003bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bec  08002bec  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002bec  08002bec  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002bec  08002bec  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bec  08002bec  00003bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bf0  08002bf0  00003bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002bf4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002c00  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002c00  000040ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007570  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001915  00000000  00000000  0000b5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0000cec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005c6  00000000  00000000  0000d698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ecc6  00000000  00000000  0000dc5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000904c  00000000  00000000  0002c924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b847d  00000000  00000000  00035970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000edded  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec4  00000000  00000000  000ede30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000efcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002b94 	.word	0x08002b94

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002b94 	.word	0x08002b94

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	@ 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2f>:
 8000968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800096c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000970:	bf24      	itt	cs
 8000972:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000976:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097a:	d90d      	bls.n	8000998 <__aeabi_d2f+0x30>
 800097c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000980:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000984:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000988:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800098c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000990:	bf08      	it	eq
 8000992:	f020 0001 	biceq.w	r0, r0, #1
 8000996:	4770      	bx	lr
 8000998:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800099c:	d121      	bne.n	80009e2 <__aeabi_d2f+0x7a>
 800099e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a2:	bfbc      	itt	lt
 80009a4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a8:	4770      	bxlt	lr
 80009aa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b2:	f1c2 0218 	rsb	r2, r2, #24
 80009b6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80009be:	fa20 f002 	lsr.w	r0, r0, r2
 80009c2:	bf18      	it	ne
 80009c4:	f040 0001 	orrne.w	r0, r0, #1
 80009c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d4:	ea40 000c 	orr.w	r0, r0, ip
 80009d8:	fa23 f302 	lsr.w	r3, r3, r2
 80009dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e0:	e7cc      	b.n	800097c <__aeabi_d2f+0x14>
 80009e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e6:	d107      	bne.n	80009f8 <__aeabi_d2f+0x90>
 80009e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009ec:	bf1e      	ittt	ne
 80009ee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f6:	4770      	bxne	lr
 80009f8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009fc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <initADS_SW>:


#include "ads1118.h"

// ------------ ADS1118 SOFTWARE INTERACTION ---------------
void initADS_SW(ADS* ads, SPI_HandleTypeDef* spiInstance) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	ads->hspi = spiInstance;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	601a      	str	r2, [r3, #0]
	ads->FSR = 2.048;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8000a90 <initADS_SW+0x88>)
 8000a1c:	609a      	str	r2, [r3, #8]
	ads->SPS = 128;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2280      	movs	r2, #128	@ 0x80
 8000a22:	60da      	str	r2, [r3, #12]

	// Default Config According to Datasheet
	ads->configReg.bits.RESV = CONFIG_BIT_RESV; // Low bit (0)
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	8893      	ldrh	r3, [r2, #4]
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	8093      	strh	r3, [r2, #4]
	ads->configReg.bits.NOP = DATA_VALID;
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	8893      	ldrh	r3, [r2, #4]
 8000a32:	2101      	movs	r1, #1
 8000a34:	f361 0342 	bfi	r3, r1, #1, #2
 8000a38:	8093      	strh	r3, [r2, #4]
	ads->configReg.bits.PULL_UP_EN = ENABLED;
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	8893      	ldrh	r3, [r2, #4]
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	8093      	strh	r3, [r2, #4]
	ads->configReg.bits.TS_MODE = ADC_MODE;
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	8893      	ldrh	r3, [r2, #4]
 8000a48:	f023 0310 	bic.w	r3, r3, #16
 8000a4c:	8093      	strh	r3, [r2, #4]
	ads->configReg.bits.DR = SPS_128;
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	8893      	ldrh	r3, [r2, #4]
 8000a52:	2104      	movs	r1, #4
 8000a54:	f361 1347 	bfi	r3, r1, #5, #3
 8000a58:	8093      	strh	r3, [r2, #4]
	ads->configReg.bits.MODE = SS_EN;
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	8893      	ldrh	r3, [r2, #4]
 8000a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a62:	8093      	strh	r3, [r2, #4]
	ads->configReg.bits.PGA = FSR_2048;
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	8893      	ldrh	r3, [r2, #4]
 8000a68:	2102      	movs	r1, #2
 8000a6a:	f361 234b 	bfi	r3, r1, #9, #3
 8000a6e:	8093      	strh	r3, [r2, #4]
	ads->configReg.bits.MUX = AINPN_0_1;
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	8893      	ldrh	r3, [r2, #4]
 8000a74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000a78:	8093      	strh	r3, [r2, #4]
	ads->configReg.bits.SS = STOPPED; // High bit (15)
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	8893      	ldrh	r3, [r2, #4]
 8000a7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a82:	8093      	strh	r3, [r2, #4]

}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	4003126f 	.word	0x4003126f

08000a94 <initADS_HW>:

// ------------ ADS1118 HARDWARE INTERACTION ------------

bool initADS_HW(ADS* ads, uint8_t* rxData) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	bool rst_status = resetConfig(ads, rxData);
 8000a9e:	6839      	ldr	r1, [r7, #0]
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f000 f815 	bl	8000ad0 <resetConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	73fb      	strb	r3, [r7, #15]
	bool mux_status = enable_AIN0_SE(ads, rxData);
 8000aaa:	6839      	ldr	r1, [r7, #0]
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 f886 	bl	8000bbe <enable_AIN0_SE>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	73bb      	strb	r3, [r7, #14]
	return (rst_status & mux_status);
 8000ab6:	7bfa      	ldrb	r2, [r7, #15]
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
 8000aba:	4013      	ands	r3, r2
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	bf14      	ite	ne
 8000ac0:	2301      	movne	r3, #1
 8000ac2:	2300      	moveq	r3, #0
 8000ac4:	b2db      	uxtb	r3, r3
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <resetConfig>:

// Reading/Writing the CONFIG Register

bool resetConfig(ADS* ads, uint8_t* rxData) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	uint8_t txData[4] = {0x05, 0x8B, 0x05, 0x8B};
 8000ada:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <resetConfig+0x64>)
 8000adc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(ADS_EN_PORT, ADS_EN_PIN, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae6:	f000 fd87 	bl	80015f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(ads->hspi, txData, rxData, 4, HAL_MAX_DELAY);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6818      	ldr	r0, [r3, #0]
 8000aee:	f107 010c 	add.w	r1, r7, #12
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	2304      	movs	r3, #4
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	f001 fc9b 	bl	8002436 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADS_EN_PORT, ADS_EN_PIN, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2110      	movs	r1, #16
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b08:	f000 fd76 	bl	80015f8 <HAL_GPIO_WritePin>
	if (txData[0] == rxData[2] && txData[1] == rxData[3]) return 1;
 8000b0c:	7b3a      	ldrb	r2, [r7, #12]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	3302      	adds	r3, #2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d107      	bne.n	8000b28 <resetConfig+0x58>
 8000b18:	7b7a      	ldrb	r2, [r7, #13]
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	3303      	adds	r3, #3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d101      	bne.n	8000b28 <resetConfig+0x58>
 8000b24:	2301      	movs	r3, #1
 8000b26:	e000      	b.n	8000b2a <resetConfig+0x5a>
	return 0;
 8000b28:	2300      	movs	r3, #0
	// 0000010110001011 (bit 15 to bit 0)
	// Based on our initialization, we get 0000010110001011, as desired!
	// uint8_t bytes[2] correctly shows bytes[0], i.e. bits 0-7 being 10001011
	// and bytes[1], i.e. bits 8-15 being 00000101
	// Hence why we sent bytes[1] first and then bytes[0] (we send MSB first!)
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	8b058b05 	.word	0x8b058b05

08000b38 <editConfig>:

bool editConfig(ADS* ads, uint8_t* rxData) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af02      	add	r7, sp, #8
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	uint8_t txData[4] = {ads->configReg.bytes[1], ads->configReg.bytes[0],
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	795b      	ldrb	r3, [r3, #5]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	733b      	strb	r3, [r7, #12]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	791b      	ldrb	r3, [r3, #4]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	737b      	strb	r3, [r7, #13]
				ads->configReg.bytes[1], ads->configReg.bytes[0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	795b      	ldrb	r3, [r3, #5]
 8000b56:	b2db      	uxtb	r3, r3
	uint8_t txData[4] = {ads->configReg.bytes[1], ads->configReg.bytes[0],
 8000b58:	73bb      	strb	r3, [r7, #14]
				ads->configReg.bytes[1], ads->configReg.bytes[0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	791b      	ldrb	r3, [r3, #4]
 8000b5e:	b2db      	uxtb	r3, r3
	uint8_t txData[4] = {ads->configReg.bytes[1], ads->configReg.bytes[0],
 8000b60:	73fb      	strb	r3, [r7, #15]
	};
	HAL_GPIO_WritePin(ADS_EN_PORT, ADS_EN_PIN, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2110      	movs	r1, #16
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6a:	f000 fd45 	bl	80015f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(ads->hspi, txData, rxData, 4, HAL_MAX_DELAY);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6818      	ldr	r0, [r3, #0]
 8000b72:	f107 010c 	add.w	r1, r7, #12
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	f001 fc59 	bl	8002436 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADS_EN_PORT, ADS_EN_PIN, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2110      	movs	r1, #16
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8c:	f000 fd34 	bl	80015f8 <HAL_GPIO_WritePin>
	if (rxData[2] == ads->configReg.bytes[1] && rxData[3] == ads->configReg.bytes[0]) {
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	3302      	adds	r3, #2
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	795b      	ldrb	r3, [r3, #5]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d109      	bne.n	8000bb4 <editConfig+0x7c>
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	3303      	adds	r3, #3
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	791b      	ldrb	r3, [r3, #4]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d101      	bne.n	8000bb4 <editConfig+0x7c>
		return 1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <editConfig+0x7e>
	}
	return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <enable_AIN0_SE>:

bool enable_AIN0_SE(ADS* ads, uint8_t* rxData) {
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	6039      	str	r1, [r7, #0]
	ads->configReg.bits.MUX = AINPN_0_G;
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	8893      	ldrh	r3, [r2, #4]
 8000bcc:	2104      	movs	r1, #4
 8000bce:	f361 330e 	bfi	r3, r1, #12, #3
 8000bd2:	8093      	strh	r3, [r2, #4]
	ads->configReg.bits.NOP = DATA_VALID;
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	8893      	ldrh	r3, [r2, #4]
 8000bd8:	2101      	movs	r1, #1
 8000bda:	f361 0342 	bfi	r3, r1, #1, #2
 8000bde:	8093      	strh	r3, [r2, #4]
	return editConfig(ads, rxData);
 8000be0:	6839      	ldr	r1, [r7, #0]
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffa8 	bl	8000b38 <editConfig>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <enableContinuousConversion>:

bool enableContinuousConversion(ADS* ads, uint8_t* rxData) {
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]
	ads->configReg.bits.MODE = CC_EN;
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	8893      	ldrh	r3, [r2, #4]
 8000c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c04:	8093      	strh	r3, [r2, #4]
	ads->configReg.bits.NOP = DATA_VALID;
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	8893      	ldrh	r3, [r2, #4]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	f361 0342 	bfi	r3, r1, #1, #2
 8000c10:	8093      	strh	r3, [r2, #4]
	return editConfig(ads, rxData);
 8000c12:	6839      	ldr	r1, [r7, #0]
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ff8f 	bl	8000b38 <editConfig>
 8000c1a:	4603      	mov	r3, r0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <continuousRead>:
	return editConfig(ads, rxData);
}

// Reading the CONVERSION Register
// Add checks for each read type? i.e. check corresponding MODE is set
void continuousRead(ADS* ads, uint8_t* rxData, float* volt) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
	uint8_t txData[2] = {ads->configReg.bytes[1], ads->configReg.bytes[0]};
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	795b      	ldrb	r3, [r3, #5]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	753b      	strb	r3, [r7, #20]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	791b      	ldrb	r3, [r3, #4]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	757b      	strb	r3, [r7, #21]
	uint8_t adsData[2];
	HAL_GPIO_WritePin(ADS_EN_PORT, ADS_EN_PIN, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2110      	movs	r1, #16
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c48:	f000 fcd6 	bl	80015f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(ads->hspi, txData, adsData, 2, HAL_MAX_DELAY);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	6818      	ldr	r0, [r3, #0]
 8000c50:	f107 0210 	add.w	r2, r7, #16
 8000c54:	f107 0114 	add.w	r1, r7, #20
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2302      	movs	r3, #2
 8000c60:	f001 fbe9 	bl	8002436 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADS_EN_PORT, ADS_EN_PIN, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2110      	movs	r1, #16
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6c:	f000 fcc4 	bl	80015f8 <HAL_GPIO_WritePin>
	uint16_t ads_reading = ((uint16_t) adsData[0] << 8) | adsData[1];
 8000c70:	7c3b      	ldrb	r3, [r7, #16]
 8000c72:	b21b      	sxth	r3, r3
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	7c7b      	ldrb	r3, [r7, #17]
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	82fb      	strh	r3, [r7, #22]
	*volt = parseVoltage(ads, ads_reading);
 8000c82:	8afb      	ldrh	r3, [r7, #22]
 8000c84:	4619      	mov	r1, r3
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f000 f80a 	bl	8000ca0 <parseVoltage>
 8000c8c:	eef0 7a40 	vmov.f32	s15, s0
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	edc3 7a00 	vstr	s15, [r3]
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <parseVoltage>:
		return 1;
	}
	return 0;
}

float parseVoltage(ADS* ads, uint16_t ads_reading) {
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]
	return ((ads_reading/32768.0)*(ads->FSR));
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fbde 	bl	8000470 <__aeabi_i2d>
 8000cb4:	f04f 0200 	mov.w	r2, #0
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <parseVoltage+0x58>)
 8000cba:	f7ff fd6d 	bl	8000798 <__aeabi_ddiv>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	4614      	mov	r4, r2
 8000cc4:	461d      	mov	r5, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fbe2 	bl	8000494 <__aeabi_f2d>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	4629      	mov	r1, r5
 8000cd8:	f7ff fc34 	bl	8000544 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f7ff fe40 	bl	8000968 <__aeabi_d2f>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	ee07 3a90 	vmov	s15, r3
}
 8000cee:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf8:	40e00000 	.word	0x40e00000

08000cfc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <MX_GPIO_Init+0x5c>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d14:	4a10      	ldr	r2, [pc, #64]	@ (8000d58 <MX_GPIO_Init+0x5c>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <MX_GPIO_Init+0x5c>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADS_EN_GPIO_Port, ADS_EN_Pin, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d30:	f000 fc62 	bl	80015f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADS_EN_Pin */
  GPIO_InitStruct.Pin = ADS_EN_Pin;
 8000d34:	2310      	movs	r3, #16
 8000d36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ADS_EN_GPIO_Port, &GPIO_InitStruct);
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4c:	f000 faea 	bl	8001324 <HAL_GPIO_Init>

}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d60:	f000 f985 	bl	800106e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d64:	f000 f828 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d68:	f7ff ffc8 	bl	8000cfc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d6c:	f000 f870 	bl	8000e50 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */

  initADS_SW(&ADS1118, &hspi1);
 8000d70:	490c      	ldr	r1, [pc, #48]	@ (8000da4 <main+0x48>)
 8000d72:	480d      	ldr	r0, [pc, #52]	@ (8000da8 <main+0x4c>)
 8000d74:	f7ff fe48 	bl	8000a08 <initADS_SW>
  status = initADS_HW(&ADS1118, rxData);
 8000d78:	490c      	ldr	r1, [pc, #48]	@ (8000dac <main+0x50>)
 8000d7a:	480b      	ldr	r0, [pc, #44]	@ (8000da8 <main+0x4c>)
 8000d7c:	f7ff fe8a 	bl	8000a94 <initADS_HW>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <main+0x54>)
 8000d86:	601a      	str	r2, [r3, #0]
  status = enableContinuousConversion(&ADS1118, rxData);
 8000d88:	4908      	ldr	r1, [pc, #32]	@ (8000dac <main+0x50>)
 8000d8a:	4807      	ldr	r0, [pc, #28]	@ (8000da8 <main+0x4c>)
 8000d8c:	f7ff ff31 	bl	8000bf2 <enableContinuousConversion>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <main+0x54>)
 8000d96:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  continuousRead(&ADS1118, rxData, &voltage);
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <main+0x58>)
 8000d9a:	4904      	ldr	r1, [pc, #16]	@ (8000dac <main+0x50>)
 8000d9c:	4802      	ldr	r0, [pc, #8]	@ (8000da8 <main+0x4c>)
 8000d9e:	f7ff ff41 	bl	8000c24 <continuousRead>
 8000da2:	e7f9      	b.n	8000d98 <main+0x3c>
 8000da4:	20000044 	.word	0x20000044
 8000da8:	20000028 	.word	0x20000028
 8000dac:	20000038 	.word	0x20000038
 8000db0:	20000040 	.word	0x20000040
 8000db4:	2000003c 	.word	0x2000003c

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b096      	sub	sp, #88	@ 0x58
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	2244      	movs	r2, #68	@ 0x44
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 feb8 	bl	8002b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000dde:	f000 fc31 	bl	8001644 <HAL_PWREx_ControlVoltageScaling>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000de8:	f000 f82c 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dec:	2310      	movs	r3, #16
 8000dee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000df8:	2360      	movs	r3, #96	@ 0x60
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fc73 	bl	80016f0 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000e10:	f000 f818 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 f873 	bl	8001f18 <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e38:	f000 f804 	bl	8000e44 <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3758      	adds	r7, #88	@ 0x58
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <Error_Handler+0x8>

08000e50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e56:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec8 <MX_SPI1_Init+0x78>)
 8000e58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e62:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e68:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e6a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <MX_SPI1_Init+0x74>)
 8000eb0:	f001 fa1e 	bl	80022f0 <HAL_SPI_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f7ff ffc3 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000044 	.word	0x20000044
 8000ec8:	40013000 	.word	0x40013000

08000ecc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a17      	ldr	r2, [pc, #92]	@ (8000f48 <HAL_SPI_MspInit+0x7c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d128      	bne.n	8000f40 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eee:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <HAL_SPI_MspInit+0x80>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef2:	4a16      	ldr	r2, [pc, #88]	@ (8000f4c <HAL_SPI_MspInit+0x80>)
 8000ef4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ef8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000efa:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <HAL_SPI_MspInit+0x80>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <HAL_SPI_MspInit+0x80>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a10      	ldr	r2, [pc, #64]	@ (8000f4c <HAL_SPI_MspInit+0x80>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <HAL_SPI_MspInit+0x80>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f1e:	23e0      	movs	r3, #224	@ 0xe0
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f2e:	2305      	movs	r3, #5
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3c:	f000 f9f2 	bl	8001324 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	@ 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40013000 	.word	0x40013000
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <HAL_MspInit+0x44>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f94 <HAL_MspInit+0x44>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f62:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <HAL_MspInit+0x44>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <HAL_MspInit+0x44>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f72:	4a08      	ldr	r2, [pc, #32]	@ (8000f94 <HAL_MspInit+0x44>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_MspInit+0x44>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <NMI_Handler+0x4>

08000fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <MemManage_Handler+0x4>

08000fb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fee:	f000 f893 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	@ (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001054 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001020:	f7ff ffea 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001024:	480c      	ldr	r0, [pc, #48]	@ (8001058 <LoopForever+0x6>)
  ldr r1, =_edata
 8001026:	490d      	ldr	r1, [pc, #52]	@ (800105c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001028:	4a0d      	ldr	r2, [pc, #52]	@ (8001060 <LoopForever+0xe>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <LoopForever+0x12>)
  ldr r4, =_ebss
 800103c:	4c0a      	ldr	r4, [pc, #40]	@ (8001068 <LoopForever+0x16>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104a:	f001 fd7f 	bl	8002b4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800104e:	f7ff fe85 	bl	8000d5c <main>

08001052 <LoopForever>:

LoopForever:
    b LoopForever
 8001052:	e7fe      	b.n	8001052 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001054:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001060:	08002bf4 	.word	0x08002bf4
  ldr r2, =_sbss
 8001064:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001068:	200000ac 	.word	0x200000ac

0800106c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC1_IRQHandler>

0800106e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f91f 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107e:	200f      	movs	r0, #15
 8001080:	f000 f80e 	bl	80010a0 <HAL_InitTick>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	e001      	b.n	8001094 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001090:	f7ff ff5e 	bl	8000f50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001094:	79fb      	ldrb	r3, [r7, #7]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <HAL_InitTick+0x6c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d023      	beq.n	80010fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010b4:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <HAL_InitTick+0x70>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <HAL_InitTick+0x6c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f91d 	bl	800130a <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10f      	bne.n	80010f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d809      	bhi.n	80010f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e4:	f000 f8f5 	bl	80012d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <HAL_InitTick+0x74>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e007      	b.n	8001100 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
 80010f4:	e004      	b.n	8001100 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e001      	b.n	8001100 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008
 8001110:	20000000 	.word	0x20000000
 8001114:	20000004 	.word	0x20000004

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008
 800113c:	200000a8 	.word	0x200000a8

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	200000a8 	.word	0x200000a8

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	@ (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	@ (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	@ (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	@ 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	@ 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001288:	d301      	bcc.n	800128e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128a:	2301      	movs	r3, #1
 800128c:	e00f      	b.n	80012ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128e:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <SysTick_Config+0x40>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001296:	210f      	movs	r1, #15
 8001298:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800129c:	f7ff ff8e 	bl	80011bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <SysTick_Config+0x40>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a6:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <SysTick_Config+0x40>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff47 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff5c 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff8e 	bl	8001210 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5d 	bl	80011bc <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffb0 	bl	8001278 <SysTick_Config>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001332:	e148      	b.n	80015c6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2101      	movs	r1, #1
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	4013      	ands	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 813a 	beq.w	80015c0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d005      	beq.n	8001364 <HAL_GPIO_Init+0x40>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d130      	bne.n	80013c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800139a:	2201      	movs	r2, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	f003 0201 	and.w	r2, r3, #1
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d017      	beq.n	8001402 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d123      	bne.n	8001456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	08da      	lsrs	r2, r3, #3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3208      	adds	r2, #8
 8001450:	6939      	ldr	r1, [r7, #16]
 8001452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0203 	and.w	r2, r3, #3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8094 	beq.w	80015c0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001498:	4b52      	ldr	r3, [pc, #328]	@ (80015e4 <HAL_GPIO_Init+0x2c0>)
 800149a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800149c:	4a51      	ldr	r2, [pc, #324]	@ (80015e4 <HAL_GPIO_Init+0x2c0>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80014a4:	4b4f      	ldr	r3, [pc, #316]	@ (80015e4 <HAL_GPIO_Init+0x2c0>)
 80014a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b0:	4a4d      	ldr	r2, [pc, #308]	@ (80015e8 <HAL_GPIO_Init+0x2c4>)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014da:	d00d      	beq.n	80014f8 <HAL_GPIO_Init+0x1d4>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a43      	ldr	r2, [pc, #268]	@ (80015ec <HAL_GPIO_Init+0x2c8>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d007      	beq.n	80014f4 <HAL_GPIO_Init+0x1d0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a42      	ldr	r2, [pc, #264]	@ (80015f0 <HAL_GPIO_Init+0x2cc>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d101      	bne.n	80014f0 <HAL_GPIO_Init+0x1cc>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e004      	b.n	80014fa <HAL_GPIO_Init+0x1d6>
 80014f0:	2307      	movs	r3, #7
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x1d6>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_GPIO_Init+0x1d6>
 80014f8:	2300      	movs	r3, #0
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	f002 0203 	and.w	r2, r2, #3
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	4093      	lsls	r3, r2
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150a:	4937      	ldr	r1, [pc, #220]	@ (80015e8 <HAL_GPIO_Init+0x2c4>)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001518:	4b36      	ldr	r3, [pc, #216]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800153c:	4a2d      	ldr	r2, [pc, #180]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001542:	4b2c      	ldr	r3, [pc, #176]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001566:	4a23      	ldr	r2, [pc, #140]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800156c:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001590:	4a18      	ldr	r2, [pc, #96]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001596:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ba:	4a0e      	ldr	r2, [pc, #56]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f47f aeaf 	bne.w	8001334 <HAL_GPIO_Init+0x10>
  }
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010000 	.word	0x40010000
 80015ec:	48000400 	.word	0x48000400
 80015f0:	48000800 	.word	0x48000800
 80015f4:	40010400 	.word	0x40010400

080015f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
 8001604:	4613      	mov	r3, r2
 8001606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001608:	787b      	ldrb	r3, [r7, #1]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160e:	887a      	ldrh	r2, [r7, #2]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001614:	e002      	b.n	800161c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <HAL_PWREx_GetVoltageRange+0x18>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40007000 	.word	0x40007000

08001644 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001652:	d130      	bne.n	80016b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001654:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800165c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001660:	d038      	beq.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800166a:	4a1e      	ldr	r2, [pc, #120]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001670:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001672:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2232      	movs	r2, #50	@ 0x32
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	4a1b      	ldr	r2, [pc, #108]	@ (80016ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	0c9b      	lsrs	r3, r3, #18
 8001684:	3301      	adds	r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001688:	e002      	b.n	8001690 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3b01      	subs	r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001690:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800169c:	d102      	bne.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f2      	bne.n	800168a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016a4:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016b0:	d110      	bne.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e00f      	b.n	80016d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016b6:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016c2:	d007      	beq.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016cc:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40007000 	.word	0x40007000
 80016e8:	20000000 	.word	0x20000000
 80016ec:	431bde83 	.word	0x431bde83

080016f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d102      	bne.n	8001704 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	f000 bc02 	b.w	8001f08 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001704:	4b96      	ldr	r3, [pc, #600]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800170e:	4b94      	ldr	r3, [pc, #592]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80e4 	beq.w	80018ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d007      	beq.n	800173c <HAL_RCC_OscConfig+0x4c>
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2b0c      	cmp	r3, #12
 8001730:	f040 808b 	bne.w	800184a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2b01      	cmp	r3, #1
 8001738:	f040 8087 	bne.w	800184a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800173c:	4b88      	ldr	r3, [pc, #544]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_OscConfig+0x64>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e3d9      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1a      	ldr	r2, [r3, #32]
 8001758:	4b81      	ldr	r3, [pc, #516]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <HAL_RCC_OscConfig+0x7e>
 8001764:	4b7e      	ldr	r3, [pc, #504]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800176c:	e005      	b.n	800177a <HAL_RCC_OscConfig+0x8a>
 800176e:	4b7c      	ldr	r3, [pc, #496]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800177a:	4293      	cmp	r3, r2
 800177c:	d223      	bcs.n	80017c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fd54 	bl	8002230 <RCC_SetFlashLatencyFromMSIRange>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e3ba      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001792:	4b73      	ldr	r3, [pc, #460]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a72      	ldr	r2, [pc, #456]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b70      	ldr	r3, [pc, #448]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	496d      	ldr	r1, [pc, #436]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	4968      	ldr	r1, [pc, #416]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
 80017c4:	e025      	b.n	8001812 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c6:	4b66      	ldr	r3, [pc, #408]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a65      	ldr	r2, [pc, #404]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017cc:	f043 0308 	orr.w	r3, r3, #8
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b63      	ldr	r3, [pc, #396]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	4960      	ldr	r1, [pc, #384]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	495b      	ldr	r1, [pc, #364]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fd14 	bl	8002230 <RCC_SetFlashLatencyFromMSIRange>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e37a      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001812:	f000 fc81 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 8001816:	4602      	mov	r2, r0
 8001818:	4b51      	ldr	r3, [pc, #324]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	4950      	ldr	r1, [pc, #320]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001824:	5ccb      	ldrb	r3, [r1, r3]
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	4a4e      	ldr	r2, [pc, #312]	@ (8001968 <HAL_RCC_OscConfig+0x278>)
 8001830:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001832:	4b4e      	ldr	r3, [pc, #312]	@ (800196c <HAL_RCC_OscConfig+0x27c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fc32 	bl	80010a0 <HAL_InitTick>
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d052      	beq.n	80018ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	e35e      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d032      	beq.n	80018b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001852:	4b43      	ldr	r3, [pc, #268]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a42      	ldr	r2, [pc, #264]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800185e:	f7ff fc6f 	bl	8001140 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001866:	f7ff fc6b 	bl	8001140 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e347      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001878:	4b39      	ldr	r3, [pc, #228]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001884:	4b36      	ldr	r3, [pc, #216]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a35      	ldr	r2, [pc, #212]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b33      	ldr	r3, [pc, #204]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4930      	ldr	r1, [pc, #192]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	492b      	ldr	r1, [pc, #172]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
 80018b6:	e01a      	b.n	80018ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018b8:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a28      	ldr	r2, [pc, #160]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fc3c 	bl	8001140 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018cc:	f7ff fc38 	bl	8001140 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e314      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018de:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x1dc>
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d073      	beq.n	80019e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x21c>
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d10e      	bne.n	8001924 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d10b      	bne.n	8001924 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d063      	beq.n	80019e0 <HAL_RCC_OscConfig+0x2f0>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d15f      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e2f1      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800192c:	d106      	bne.n	800193c <HAL_RCC_OscConfig+0x24c>
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e025      	b.n	8001988 <HAL_RCC_OscConfig+0x298>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001944:	d114      	bne.n	8001970 <HAL_RCC_OscConfig+0x280>
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 800194c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a02      	ldr	r2, [pc, #8]	@ (8001960 <HAL_RCC_OscConfig+0x270>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e013      	b.n	8001988 <HAL_RCC_OscConfig+0x298>
 8001960:	40021000 	.word	0x40021000
 8001964:	08002bac 	.word	0x08002bac
 8001968:	20000000 	.word	0x20000000
 800196c:	20000004 	.word	0x20000004
 8001970:	4ba0      	ldr	r3, [pc, #640]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a9f      	ldr	r2, [pc, #636]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b9d      	ldr	r3, [pc, #628]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a9c      	ldr	r2, [pc, #624]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff fbd6 	bl	8001140 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fbd2 	bl	8001140 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	@ 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e2ae      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019aa:	4b92      	ldr	r3, [pc, #584]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x2a8>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff fbc2 	bl	8001140 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fbbe 	bl	8001140 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	@ 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e29a      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019d2:	4b88      	ldr	r3, [pc, #544]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x2d0>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d060      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_OscConfig+0x310>
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d119      	bne.n	8001a2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d116      	bne.n	8001a2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a00:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_OscConfig+0x328>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e277      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b76      	ldr	r3, [pc, #472]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	061b      	lsls	r3, r3, #24
 8001a26:	4973      	ldr	r1, [pc, #460]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a2c:	e040      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d023      	beq.n	8001a7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a36:	4b6f      	ldr	r3, [pc, #444]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff fb7d 	bl	8001140 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fb79 	bl	8001140 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e255      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a5c:	4b65      	ldr	r3, [pc, #404]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a68:	4b62      	ldr	r3, [pc, #392]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	061b      	lsls	r3, r3, #24
 8001a76:	495f      	ldr	r1, [pc, #380]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
 8001a7c:	e018      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001a84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fb59 	bl	8001140 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff fb55 	bl	8001140 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e231      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa4:	4b53      	ldr	r3, [pc, #332]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d03c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01c      	beq.n	8001afe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aca:	4a4a      	ldr	r2, [pc, #296]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fb34 	bl	8001140 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff fb30 	bl	8001140 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e20c      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aee:	4b41      	ldr	r3, [pc, #260]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0ef      	beq.n	8001adc <HAL_RCC_OscConfig+0x3ec>
 8001afc:	e01b      	b.n	8001b36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afe:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b04:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7ff fb17 	bl	8001140 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b16:	f7ff fb13 	bl	8001140 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e1ef      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b28:	4b32      	ldr	r3, [pc, #200]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ef      	bne.n	8001b16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80a6 	beq.w	8001c90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b48:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10d      	bne.n	8001b70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b54:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b58:	4a26      	ldr	r2, [pc, #152]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b60:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <HAL_RCC_OscConfig+0x508>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d118      	bne.n	8001bae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <HAL_RCC_OscConfig+0x508>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf8 <HAL_RCC_OscConfig+0x508>)
 8001b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b88:	f7ff fada 	bl	8001140 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b90:	f7ff fad6 	bl	8001140 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e1b2      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <HAL_RCC_OscConfig+0x508>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x4d8>
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bc6:	e029      	b.n	8001c1c <HAL_RCC_OscConfig+0x52c>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d115      	bne.n	8001bfc <HAL_RCC_OscConfig+0x50c>
 8001bd0:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd6:	4a07      	ldr	r2, [pc, #28]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001be0:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001be6:	4a03      	ldr	r2, [pc, #12]	@ (8001bf4 <HAL_RCC_OscConfig+0x504>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bf0:	e014      	b.n	8001c1c <HAL_RCC_OscConfig+0x52c>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	4b9a      	ldr	r3, [pc, #616]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c02:	4a99      	ldr	r2, [pc, #612]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c0c:	4b96      	ldr	r3, [pc, #600]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c12:	4a95      	ldr	r2, [pc, #596]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001c14:	f023 0304 	bic.w	r3, r3, #4
 8001c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d016      	beq.n	8001c52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff fa8c 	bl	8001140 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fa88 	bl	8001140 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e162      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c42:	4b89      	ldr	r3, [pc, #548]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0ed      	beq.n	8001c2c <HAL_RCC_OscConfig+0x53c>
 8001c50:	e015      	b.n	8001c7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c52:	f7ff fa75 	bl	8001140 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7ff fa71 	bl	8001140 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e14b      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c70:	4b7d      	ldr	r3, [pc, #500]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ed      	bne.n	8001c5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c7e:	7ffb      	ldrb	r3, [r7, #31]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c84:	4b78      	ldr	r3, [pc, #480]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c88:	4a77      	ldr	r2, [pc, #476]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d03c      	beq.n	8001d16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01c      	beq.n	8001cde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ca4:	4b70      	ldr	r3, [pc, #448]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001caa:	4a6f      	ldr	r2, [pc, #444]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fa44 	bl	8001140 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cbc:	f7ff fa40 	bl	8001140 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e11c      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cce:	4b66      	ldr	r3, [pc, #408]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ef      	beq.n	8001cbc <HAL_RCC_OscConfig+0x5cc>
 8001cdc:	e01b      	b.n	8001d16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cde:	4b62      	ldr	r3, [pc, #392]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ce4:	4a60      	ldr	r2, [pc, #384]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7ff fa27 	bl	8001140 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cf6:	f7ff fa23 	bl	8001140 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0ff      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d08:	4b57      	ldr	r3, [pc, #348]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1ef      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80f3 	beq.w	8001f06 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	f040 80c9 	bne.w	8001ebc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0203 	and.w	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d12c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d123      	bne.n	8001d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d11b      	bne.n	8001d98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d113      	bne.n	8001d98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d109      	bne.n	8001d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	3b01      	subs	r3, #1
 8001d92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d06b      	beq.n	8001e70 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d062      	beq.n	8001e64 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d9e:	4b32      	ldr	r3, [pc, #200]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0ac      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dae:	4b2e      	ldr	r3, [pc, #184]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2d      	ldr	r2, [pc, #180]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001db4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001db8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dba:	f7ff f9c1 	bl	8001140 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7ff f9bd 	bl	8001140 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e099      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd4:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de0:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <HAL_RCC_OscConfig+0x77c>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001df0:	3a01      	subs	r2, #1
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	4311      	orrs	r1, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001dfa:	0212      	lsls	r2, r2, #8
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e02:	0852      	lsrs	r2, r2, #1
 8001e04:	3a01      	subs	r2, #1
 8001e06:	0552      	lsls	r2, r2, #21
 8001e08:	4311      	orrs	r1, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e0e:	0852      	lsrs	r2, r2, #1
 8001e10:	3a01      	subs	r2, #1
 8001e12:	0652      	lsls	r2, r2, #25
 8001e14:	4311      	orrs	r1, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e1a:	06d2      	lsls	r2, r2, #27
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	4912      	ldr	r1, [pc, #72]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e24:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0f      	ldr	r2, [pc, #60]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e30:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4a0c      	ldr	r2, [pc, #48]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e3c:	f7ff f980 	bl	8001140 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff f97c 	bl	8001140 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e058      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e56:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <HAL_RCC_OscConfig+0x778>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e62:	e050      	b.n	8001f06 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e04f      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e70:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <HAL_RCC_OscConfig+0x820>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d144      	bne.n	8001f06 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <HAL_RCC_OscConfig+0x820>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <HAL_RCC_OscConfig+0x820>)
 8001e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <HAL_RCC_OscConfig+0x820>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a20      	ldr	r2, [pc, #128]	@ (8001f10 <HAL_RCC_OscConfig+0x820>)
 8001e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e94:	f7ff f954 	bl	8001140 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff f950 	bl	8001140 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e02c      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eae:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <HAL_RCC_OscConfig+0x820>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x7ac>
 8001eba:	e024      	b.n	8001f06 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	d01f      	beq.n	8001f02 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec2:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <HAL_RCC_OscConfig+0x820>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	@ (8001f10 <HAL_RCC_OscConfig+0x820>)
 8001ec8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7ff f937 	bl	8001140 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7ff f933 	bl	8001140 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e00f      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <HAL_RCC_OscConfig+0x820>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_RCC_OscConfig+0x820>)
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	4905      	ldr	r1, [pc, #20]	@ (8001f10 <HAL_RCC_OscConfig+0x820>)
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_RCC_OscConfig+0x824>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	60cb      	str	r3, [r1, #12]
 8001f00:	e001      	b.n	8001f06 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	feeefffc 	.word	0xfeeefffc

08001f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0e7      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b75      	ldr	r3, [pc, #468]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d910      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b72      	ldr	r3, [pc, #456]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4970      	ldr	r1, [pc, #448]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b6e      	ldr	r3, [pc, #440]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0cf      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d010      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	4b66      	ldr	r3, [pc, #408]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d908      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b63      	ldr	r3, [pc, #396]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4960      	ldr	r1, [pc, #384]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d04c      	beq.n	8002030 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9e:	4b5a      	ldr	r3, [pc, #360]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d121      	bne.n	8001fee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0a6      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb6:	4b54      	ldr	r3, [pc, #336]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d115      	bne.n	8001fee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e09a      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fce:	4b4e      	ldr	r3, [pc, #312]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d109      	bne.n	8001fee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e08e      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fde:	4b4a      	ldr	r3, [pc, #296]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e086      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fee:	4b46      	ldr	r3, [pc, #280]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f023 0203 	bic.w	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4943      	ldr	r1, [pc, #268]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002000:	f7ff f89e 	bl	8001140 <HAL_GetTick>
 8002004:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	e00a      	b.n	800201e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002008:	f7ff f89a 	bl	8001140 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e06e      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	4b3a      	ldr	r3, [pc, #232]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 020c 	and.w	r2, r3, #12
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	429a      	cmp	r2, r3
 800202e:	d1eb      	bne.n	8002008 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d010      	beq.n	800205e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	4b31      	ldr	r3, [pc, #196]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002048:	429a      	cmp	r2, r3
 800204a:	d208      	bcs.n	800205e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b2e      	ldr	r3, [pc, #184]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	492b      	ldr	r1, [pc, #172]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205e:	4b29      	ldr	r3, [pc, #164]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d210      	bcs.n	800208e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206c:	4b25      	ldr	r3, [pc, #148]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 0207 	bic.w	r2, r3, #7
 8002074:	4923      	ldr	r1, [pc, #140]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207c:	4b21      	ldr	r3, [pc, #132]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d001      	beq.n	800208e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e036      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800209a:	4b1b      	ldr	r3, [pc, #108]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4918      	ldr	r1, [pc, #96]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d009      	beq.n	80020cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b8:	4b13      	ldr	r3, [pc, #76]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4910      	ldr	r1, [pc, #64]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020cc:	f000 f824 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	490b      	ldr	r1, [pc, #44]	@ (800210c <HAL_RCC_ClockConfig+0x1f4>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	4a09      	ldr	r2, [pc, #36]	@ (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 80020ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020ec:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <HAL_RCC_ClockConfig+0x1fc>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe ffd5 	bl	80010a0 <HAL_InitTick>
 80020f6:	4603      	mov	r3, r0
 80020f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80020fa:	7afb      	ldrb	r3, [r7, #11]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40022000 	.word	0x40022000
 8002108:	40021000 	.word	0x40021000
 800210c:	08002bac 	.word	0x08002bac
 8002110:	20000000 	.word	0x20000000
 8002114:	20000004 	.word	0x20000004

08002118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	@ 0x24
 800211c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002126:	4b3e      	ldr	r3, [pc, #248]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002130:	4b3b      	ldr	r3, [pc, #236]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x34>
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b0c      	cmp	r3, #12
 8002144:	d121      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d11e      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800214c:	4b34      	ldr	r3, [pc, #208]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002158:	4b31      	ldr	r3, [pc, #196]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 800215a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	e005      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002168:	4b2d      	ldr	r3, [pc, #180]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002174:	4a2b      	ldr	r2, [pc, #172]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10d      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b04      	cmp	r3, #4
 800218e:	d102      	bne.n	8002196 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002190:	4b25      	ldr	r3, [pc, #148]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x110>)
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	e004      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800219c:	4b23      	ldr	r3, [pc, #140]	@ (800222c <HAL_RCC_GetSysClockFreq+0x114>)
 800219e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	d134      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d003      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0xa6>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d003      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0xac>
 80021bc:	e005      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021be:	4b1a      	ldr	r3, [pc, #104]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x110>)
 80021c0:	617b      	str	r3, [r7, #20]
      break;
 80021c2:	e005      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021c4:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_RCC_GetSysClockFreq+0x114>)
 80021c6:	617b      	str	r3, [r7, #20]
      break;
 80021c8:	e002      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	617b      	str	r3, [r7, #20]
      break;
 80021ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021d0:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	3301      	adds	r3, #1
 80021dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	fb03 f202 	mul.w	r2, r3, r2
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	0e5b      	lsrs	r3, r3, #25
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	3301      	adds	r3, #1
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002210:	69bb      	ldr	r3, [r7, #24]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	@ 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	08002bbc 	.word	0x08002bbc
 8002228:	00f42400 	.word	0x00f42400
 800222c:	007a1200 	.word	0x007a1200

08002230 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800223c:	4b2a      	ldr	r3, [pc, #168]	@ (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002248:	f7ff f9ee 	bl	8001628 <HAL_PWREx_GetVoltageRange>
 800224c:	6178      	str	r0, [r7, #20]
 800224e:	e014      	b.n	800227a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	4b25      	ldr	r3, [pc, #148]	@ (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	4a24      	ldr	r2, [pc, #144]	@ (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800225a:	6593      	str	r3, [r2, #88]	@ 0x58
 800225c:	4b22      	ldr	r3, [pc, #136]	@ (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002268:	f7ff f9de 	bl	8001628 <HAL_PWREx_GetVoltageRange>
 800226c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800226e:	4b1e      	ldr	r3, [pc, #120]	@ (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002272:	4a1d      	ldr	r2, [pc, #116]	@ (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002278:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002280:	d10b      	bne.n	800229a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b80      	cmp	r3, #128	@ 0x80
 8002286:	d919      	bls.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2ba0      	cmp	r3, #160	@ 0xa0
 800228c:	d902      	bls.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800228e:	2302      	movs	r3, #2
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	e013      	b.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002294:	2301      	movs	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	e010      	b.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b80      	cmp	r3, #128	@ 0x80
 800229e:	d902      	bls.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022a0:	2303      	movs	r3, #3
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	e00a      	b.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b80      	cmp	r3, #128	@ 0x80
 80022aa:	d102      	bne.n	80022b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ac:	2302      	movs	r3, #2
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	e004      	b.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b70      	cmp	r3, #112	@ 0x70
 80022b6:	d101      	bne.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022b8:	2301      	movs	r3, #1
 80022ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022bc:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 0207 	bic.w	r2, r3, #7
 80022c4:	4909      	ldr	r1, [pc, #36]	@ (80022ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022cc:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d001      	beq.n	80022de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40022000 	.word	0x40022000

080022f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e095      	b.n	800242e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	2b00      	cmp	r3, #0
 8002308:	d108      	bne.n	800231c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002312:	d009      	beq.n	8002328 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
 800231a:	e005      	b.n	8002328 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fdc2 	bl	8000ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800235e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002368:	d902      	bls.n	8002370 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	e002      	b.n	8002376 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002370:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002374:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800237e:	d007      	beq.n	8002390 <HAL_SPI_Init+0xa0>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002388:	d002      	beq.n	8002390 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d2:	ea42 0103 	orr.w	r1, r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	0c1b      	lsrs	r3, r3, #16
 80023ec:	f003 0204 	and.w	r2, r3, #4
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800240c:	ea42 0103 	orr.w	r1, r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b08a      	sub	sp, #40	@ 0x28
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002444:	2301      	movs	r3, #1
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002448:	f7fe fe7a 	bl	8001140 <HAL_GetTick>
 800244c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002454:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002460:	887b      	ldrh	r3, [r7, #2]
 8002462:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002464:	7ffb      	ldrb	r3, [r7, #31]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d00c      	beq.n	8002484 <HAL_SPI_TransmitReceive+0x4e>
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002470:	d106      	bne.n	8002480 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <HAL_SPI_TransmitReceive+0x4a>
 800247a:	7ffb      	ldrb	r3, [r7, #31]
 800247c:	2b04      	cmp	r3, #4
 800247e:	d001      	beq.n	8002484 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
 8002482:	e1f3      	b.n	800286c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_SPI_TransmitReceive+0x60>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_SPI_TransmitReceive+0x60>
 8002490:	887b      	ldrh	r3, [r7, #2]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e1e8      	b.n	800286c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x72>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e1e1      	b.n	800286c <HAL_SPI_TransmitReceive+0x436>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d003      	beq.n	80024c4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2205      	movs	r2, #5
 80024c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	887a      	ldrh	r2, [r7, #2]
 80024ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002506:	d802      	bhi.n	800250e <HAL_SPI_TransmitReceive+0xd8>
 8002508:	8abb      	ldrh	r3, [r7, #20]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d908      	bls.n	8002520 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	e007      	b.n	8002530 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800252e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800253a:	2b40      	cmp	r3, #64	@ 0x40
 800253c:	d007      	beq.n	800254e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002556:	f240 8083 	bls.w	8002660 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_SPI_TransmitReceive+0x132>
 8002562:	8afb      	ldrh	r3, [r7, #22]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d16f      	bne.n	8002648 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256c:	881a      	ldrh	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002578:	1c9a      	adds	r2, r3, #2
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002582:	b29b      	uxth	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800258c:	e05c      	b.n	8002648 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b02      	cmp	r3, #2
 800259a:	d11b      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x19e>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d016      	beq.n	80025d4 <HAL_SPI_TransmitReceive+0x19e>
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d113      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b0:	881a      	ldrh	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025bc:	1c9a      	adds	r2, r3, #2
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d11c      	bne.n	800261c <HAL_SPI_TransmitReceive+0x1e6>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	b292      	uxth	r2, r2
 80025fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	1c9a      	adds	r2, r3, #2
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002618:	2301      	movs	r3, #1
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800261c:	f7fe fd90 	bl	8001140 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002628:	429a      	cmp	r2, r3
 800262a:	d80d      	bhi.n	8002648 <HAL_SPI_TransmitReceive+0x212>
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002632:	d009      	beq.n	8002648 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e111      	b.n	800286c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d19d      	bne.n	800258e <HAL_SPI_TransmitReceive+0x158>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d197      	bne.n	800258e <HAL_SPI_TransmitReceive+0x158>
 800265e:	e0e5      	b.n	800282c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_SPI_TransmitReceive+0x23a>
 8002668:	8afb      	ldrh	r3, [r7, #22]
 800266a:	2b01      	cmp	r3, #1
 800266c:	f040 80d1 	bne.w	8002812 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d912      	bls.n	80026a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267e:	881a      	ldrh	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268a:	1c9a      	adds	r2, r3, #2
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b02      	subs	r3, #2
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800269e:	e0b8      	b.n	8002812 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	330c      	adds	r3, #12
 80026aa:	7812      	ldrb	r2, [r2, #0]
 80026ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026c6:	e0a4      	b.n	8002812 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d134      	bne.n	8002740 <HAL_SPI_TransmitReceive+0x30a>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d02f      	beq.n	8002740 <HAL_SPI_TransmitReceive+0x30a>
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d12c      	bne.n	8002740 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d912      	bls.n	8002716 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f4:	881a      	ldrh	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002700:	1c9a      	adds	r2, r3, #2
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b02      	subs	r3, #2
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002714:	e012      	b.n	800273c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	330c      	adds	r3, #12
 8002720:	7812      	ldrb	r2, [r2, #0]
 8002722:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d148      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x3aa>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d042      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d923      	bls.n	80027ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	b292      	uxth	r2, r2
 8002772:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	1c9a      	adds	r2, r3, #2
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b02      	subs	r3, #2
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d81f      	bhi.n	80027dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	e016      	b.n	80027dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f103 020c 	add.w	r2, r3, #12
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	7812      	ldrb	r2, [r2, #0]
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027dc:	2301      	movs	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027e0:	f7fe fcae 	bl	8001140 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d803      	bhi.n	80027f8 <HAL_SPI_TransmitReceive+0x3c2>
 80027f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027f6:	d102      	bne.n	80027fe <HAL_SPI_TransmitReceive+0x3c8>
 80027f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e02c      	b.n	800286c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	f47f af55 	bne.w	80026c8 <HAL_SPI_TransmitReceive+0x292>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	f47f af4e 	bne.w	80026c8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800282c:	6a3a      	ldr	r2, [r7, #32]
 800282e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f93d 	bl	8002ab0 <SPI_EndRxTxTransaction>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e00e      	b.n	800286c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800286a:	2300      	movs	r3, #0
  }
}
 800286c:	4618      	mov	r0, r3
 800286e:	3728      	adds	r7, #40	@ 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002884:	f7fe fc5c 	bl	8001140 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	4413      	add	r3, r2
 8002892:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002894:	f7fe fc54 	bl	8001140 <HAL_GetTick>
 8002898:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800289a:	4b39      	ldr	r3, [pc, #228]	@ (8002980 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	015b      	lsls	r3, r3, #5
 80028a0:	0d1b      	lsrs	r3, r3, #20
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	fb02 f303 	mul.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028aa:	e054      	b.n	8002956 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028b2:	d050      	beq.n	8002956 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028b4:	f7fe fc44 	bl	8001140 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d902      	bls.n	80028ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d13d      	bne.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80028d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028e2:	d111      	bne.n	8002908 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ec:	d004      	beq.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028f6:	d107      	bne.n	8002908 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002910:	d10f      	bne.n	8002932 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e017      	b.n	8002976 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	3b01      	subs	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4013      	ands	r3, r2
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	429a      	cmp	r2, r3
 8002964:	bf0c      	ite	eq
 8002966:	2301      	moveq	r3, #1
 8002968:	2300      	movne	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	429a      	cmp	r2, r3
 8002972:	d19b      	bne.n	80028ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000000 	.word	0x20000000

08002984 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	@ 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002996:	f7fe fbd3 	bl	8001140 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80029a6:	f7fe fbcb 	bl	8001140 <HAL_GetTick>
 80029aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80029b4:	4b3d      	ldr	r3, [pc, #244]	@ (8002aac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00da      	lsls	r2, r3, #3
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	0d1b      	lsrs	r3, r3, #20
 80029c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80029cc:	e060      	b.n	8002a90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80029d4:	d107      	bne.n	80029e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d104      	bne.n	80029e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029ec:	d050      	beq.n	8002a90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029ee:	f7fe fba7 	bl	8001140 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d902      	bls.n	8002a04 <SPI_WaitFifoStateUntilTimeout+0x80>
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d13d      	bne.n	8002a80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a1c:	d111      	bne.n	8002a42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a26:	d004      	beq.n	8002a32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a30:	d107      	bne.n	8002a42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a4a:	d10f      	bne.n	8002a6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e010      	b.n	8002aa2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d196      	bne.n	80029ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3728      	adds	r7, #40	@ 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000000 	.word	0x20000000

08002ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f7ff ff5b 	bl	8002984 <SPI_WaitFifoStateUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e027      	b.n	8002b34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2200      	movs	r2, #0
 8002aec:	2180      	movs	r1, #128	@ 0x80
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f7ff fec0 	bl	8002874 <SPI_WaitFlagStateUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e014      	b.n	8002b34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7ff ff34 	bl	8002984 <SPI_WaitFifoStateUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b26:	f043 0220 	orr.w	r2, r3, #32
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e000      	b.n	8002b34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <memset>:
 8002b3c:	4402      	add	r2, r0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d100      	bne.n	8002b46 <memset+0xa>
 8002b44:	4770      	bx	lr
 8002b46:	f803 1b01 	strb.w	r1, [r3], #1
 8002b4a:	e7f9      	b.n	8002b40 <memset+0x4>

08002b4c <__libc_init_array>:
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	4d0d      	ldr	r5, [pc, #52]	@ (8002b84 <__libc_init_array+0x38>)
 8002b50:	4c0d      	ldr	r4, [pc, #52]	@ (8002b88 <__libc_init_array+0x3c>)
 8002b52:	1b64      	subs	r4, r4, r5
 8002b54:	10a4      	asrs	r4, r4, #2
 8002b56:	2600      	movs	r6, #0
 8002b58:	42a6      	cmp	r6, r4
 8002b5a:	d109      	bne.n	8002b70 <__libc_init_array+0x24>
 8002b5c:	4d0b      	ldr	r5, [pc, #44]	@ (8002b8c <__libc_init_array+0x40>)
 8002b5e:	4c0c      	ldr	r4, [pc, #48]	@ (8002b90 <__libc_init_array+0x44>)
 8002b60:	f000 f818 	bl	8002b94 <_init>
 8002b64:	1b64      	subs	r4, r4, r5
 8002b66:	10a4      	asrs	r4, r4, #2
 8002b68:	2600      	movs	r6, #0
 8002b6a:	42a6      	cmp	r6, r4
 8002b6c:	d105      	bne.n	8002b7a <__libc_init_array+0x2e>
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b74:	4798      	blx	r3
 8002b76:	3601      	adds	r6, #1
 8002b78:	e7ee      	b.n	8002b58 <__libc_init_array+0xc>
 8002b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7e:	4798      	blx	r3
 8002b80:	3601      	adds	r6, #1
 8002b82:	e7f2      	b.n	8002b6a <__libc_init_array+0x1e>
 8002b84:	08002bec 	.word	0x08002bec
 8002b88:	08002bec 	.word	0x08002bec
 8002b8c:	08002bec 	.word	0x08002bec
 8002b90:	08002bf0 	.word	0x08002bf0

08002b94 <_init>:
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b96:	bf00      	nop
 8002b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9a:	bc08      	pop	{r3}
 8002b9c:	469e      	mov	lr, r3
 8002b9e:	4770      	bx	lr

08002ba0 <_fini>:
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba2:	bf00      	nop
 8002ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba6:	bc08      	pop	{r3}
 8002ba8:	469e      	mov	lr, r3
 8002baa:	4770      	bx	lr
